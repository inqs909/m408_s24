---
title: "Week 1"
date: 01-22-24
description: This week is designed to be an introduction week. We will briefly discuss topics related to statistics and inference. Then we will look at installing R and RStudio as well as the basics of using R.
editor: visual
editor_options: 
  chunk_output_type: console
---

::: callout-important
## On Strike Jan 22 to Jan 26
:::

## Learning Outcomes

### First Lecture

-   Installing R and RStudio

-   Scripts

-   R Calculator

-   Types of Data

### Second Lecture

-   R Objects

-   R Functions

-   R Packages

## Important Concepts

### First Lecture

#### Accessing R & RStudio

If you are on a tablet or Chromebook, you can access R & RStudio via <https://posit.cloud/> for free. However, they have limited computing resources. Be mindful of your experimentation. You may also be able to use Quarto in Rstudio cloud.

You can install R via their website: <https://www.r-project.org/>.

You can install RStudio for free from their website: <https://posit.co/download/rstudio-desktop/>

#### Using R

R can be used as a calculator; below are a few examples:

```{r}
1+2
3/4
9*8
exp(4)
```

#### Types of Data

##### Numeric

These types of data are stored as a number in R. They may be whole numbers or contains decimal values known as double.

##### Character/String

This type of data is stored a string of character values. They are usually surrounded by quotes in the output.

##### Logical

This type of data indicates `TRUE` or `FALSE` data. It is binary data.

##### Missing

This indicates that a value is missing or not computed. Commonly stored as `NA` or `NaN`.

### Second Lecture

#### R Functions

R has specialized functions that can compute specific values. R functions require inputs, known as arguments, to produce a specific output.

For example, the `log()` function can be used to compute the natural logarithm of a specified input:

```{r}
log(34)
```

If you want to know information about a specific function, you can use the `?` operator:

```{r}
#| eval: false
#| echo: true
?log
```

which will open the help tab. Notice there are 2 arguments: `x` and `base`. This means that the `log()` function can be extended to other base. To use common log[^1], specify the arguments:

[^1]: $\log_{10}(x)$

```{r}
log(x=34, base=10)
```

Notice that I specified the arguments. You can also type this:

```{r}
log(34, 10)
```

which produces the same results. This is because R uses positions in the function to determine argument values; therefore, if the positions are correct, you do not need to specify the argument name.

Going back to the First Lecture example, `log(34)`, we did not specify the base. This is because functions have default values for arguments. The help documentation tells us what arguments have defaults and do not need to be specified.

#### R Objects

#### Install packages

You can extend the functionality of R. The [tidyverse](https://www.tidyverse.org/) package includes a popular set of R packages for data wrangling and analysis. To install tidyverse, use the `install.packages()` function[^2]:

[^2]: The package name must be inputted with quotes in the function.

```{r}
#| eval: false
install.packages('tidyverse')
```

Once you installed the R package, you will need to load with every R session using the `library()` function:

```{r}
#| eval: false
library(tidyverse)
```

## Resources

| Lecture | Slides                                                   | Videos | Files                                                                                                                              |
|--------------|--------------|--------------|-------------------------------|
| 1       | [Slides](https://m408.inqs.info/lectures/lecture_1.html) | NA     | NA                                                                                                                                 |
| 2       | [Slides](https://m408.inqs.info/lectures/lecture_2.html) | NA     | [Examples](https://m408.inqs.info/files/r_scripts/class_2.R) [General Script](https://m408.inqs.info/files/r_scripts/gen_script.R) |
