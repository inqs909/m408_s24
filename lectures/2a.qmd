---
title: "Control Flow"
format:
  revealjs:
    scrollable: true
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    incremental: false 
    chalkboard:
      src: chalkboard.json
      storage: chalkboard_pres
      theme: whiteboard
      chalk-width: 4
engine: knitr
knitr:
  opts_chunk: 
    echo: true
    eval: false
    comment: "#>" 


revealjs-plugins:
  - verticator
  
filters: 
  - reveal-header
  - reveal-auto-agenda
  - code-fullscreen
  - webr

webr: 
  show-startup-message: true
---

```{r}
#| include: false
#| eval: true
#| label: setup

library(DT)
library(tidyverse)
```

## Learning Objectives

-   Control Flow

-   Indexing

-   Comparing Numbers

-   `if/else` Statements

-   try()

-   `for` Statements

## Control Flow

The order a computer will complete tasks.

Usually incorporates statements and loops.

# Indexing

## Indexing

Within an R object, you can access an element by indexing it.

Indexing tells R which values to output.

## Vectors

A vector can be indexed by adding `[]` after the object's name and specifying the number of each element.

```{webr-r}
letters
letters[13]
```

## Matrices

A matrix can be indexed by adding `[]` after the object's name and specifying the number of each element. Separate the values by commas for specific indexes.

```{webr-r}
x <- matrix(1:40, nrow = 4)
```

## Data Frames

Data frames can be indexed using the `$` operator and `[]`.

```{webr-r}
mtcars[,"mpg"]
```

## Lists

Lists can be indexed using the `[[]]` for a specific element of a list.

```{webr-r}
toy_list <- list(x = letters,
                 y = mtcars,
                 z = list(x = diag(rep(1, 5),
                          y = matrix(1:40, nrow = 5),
                          z = band_members)))
```

# Comparing Numbers

## Comparing Numbers

You can compare two numbers, or objects, that will result in a logical output.

## Comparing Numbers Operators

| Operator | Description           |
|----------|-----------------------|
| `>`      | Greater Than          |
| `<`      | Less Than             |
| `>=`     | Greater than or equal |
| `<=`     | Less than or equal    |
| `==`     | Equals                |
| `!=`     | Not Equals            |

## Comparing Vectors

When you compare a number to a vector, it will result as a logical vector.

## Example

Try the following code and explain what is happening:

```{webr-r}
4 > 1:8

1:8 > 4
```

# `if`/`else` Statements

## if/else Statements

if/else statements are used to conduct specific tasks depending on the conditions

## `if` Statement

An `if` statement is used to if you want R to perform a specific function if a certain condition is met. An `if` statement will only run a task if a logical is returned. You will need type `if`, followed by the condition (as a logical) in parentheses, then the task.

## Example

```{webr-r}
x <- sample(-10:10,1)
if (x > 0){
  print("Positive")
}
print(x)

```

## else statement

An `else` statement will conduct a different task if the `if` statement does not conduct the tasks.

## Example

```{webr-r}
x <- sample(-10:10,1)
if (x > 0 ){
  print("Positive")
} else {
  print("Non-positive")
} 
print(x)

```

## Chain if/else statement

If you have more than two options, you can chain `if/else` statements by adding an `if` statement immediately after the word `else`.

## Example

```{webr-r}
x <- sample(-10:10,1)
if (x > 0 ){
  print("Positive")
} else if (x == 0) {
  print("Zero")
} else {
  print("Negative")
}
print(x)

```

# `try()`

## `try()`

The `try()` is an extremely powerful function that will prevent a code from stopping if an error occurs.

## Example

```{webr-r}
x <- sample(-10:10,1)
if (x > 0 ){
  stop("This is an error")
  print("Positive")
} else if (x == 0) {
  print("Zero")
} else {
  stop("This is an error")
  print("Negative")
}
print(x)

```

```{webr-r}
x <- sample(-10:10,1)
if (x > 0 ){
  try(stop("This is an error"))
  print("Positive")
} else if (x == 0) {
  print("Zero")
} else {
  try(stop("This is an error"))
  print("Negative")
}
print(x)

```

```{webr-r}
x <- sample(-10:10,1)
if (x > 0 ){
  try(stop("This is an error"), silent = T)
  print("Positive")
} else if (x == 0) {
  print("Zero")
} else {
  try(stop("This is an error"), silent = T)
  print("Negative")
}
print(x)

```

# `for` Loops

## `for` Loops

`for` loops are used to conduct an iterative task with slight changes to the input. The general format goes as follows:

```{r}
for (index in vector){
  Conduct task
}
```

You will repeat the `for` loop untie all the elements in the vector have been used.

## Example

Compute the mean:

$$
\bar x = \frac{1}{n}\sum^n_{i=1}x_i
$$

```{r}
#| eval: true
x <- rnorm(100)
mean(x)
```

## Example

Compute the variance:

$$
s^2 = \frac{1}{n-1}\sum^n_{i-1}(x_i-\bar x)^2
$$

```{r}
#| eval: true
x <- rnorm(100)
var(x)
```
