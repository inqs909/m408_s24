---
title: "Support Vector Machines"
format:
  revealjs:
    scrollable: true
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    incremental: false 
    chalkboard:
      src: chalkboard.json
      storage: chalkboard_pres
      theme: whiteboard
      chalk-width: 4
knitr:
  opts_chunk: 
    echo: true
    eval: true
    message: false
    warnings: false
    comment: "#>" 
    
revealjs-plugins:
  - pointer
  - verticator
  
filters: 
  - reveal-header
  - code-fullscreen

editor: visual
---

## Learning Outcomes

-   Support Vector Machine
-   R Code

# Support Vector Machines

## Motivating Example

![](https://www.surveypractice.org/article/2715-using-support-vector-machines-for-survey-research/attachment/9153.png){fig-align="center"}

## Motivating Example

![](https://i.stack.imgur.com/shjDw.png){fig-align="center"}

## Support Vector Machines

A Support Vector Machine will create a nonlinear boundary instead of a line.

::: fragment
It incorporates a kernel function that will compute the similarities between two support vectors.
:::

::: fragment
The kernel function can be loosely claimed how the data is modeled.
:::

## Nonlinear Boundary

![](https://miro.medium.com/v2/resize:fit:982/1*J0k7TxTLoL5ZG-Hq6v34Jg.png){fig-align="center"}

## Nonlinear Boundary

![](https://blog-c7ff.kxcdn.com/blog/wp-content/uploads/2017/02/kernel.png){fig-align="center"}

## Support Vector Machines Kernels

-   Linear

-   Polynomial

-   Radial

# R Code

## R Code

::: panel-tabset
### Data

```{r}
set.seed(1)
x <- matrix(rnorm(200 * 2), ncol = 2)
x[1:100, ] <- x[1:100, ] + 2
x[101:150, ] <- x[101:150 , ] - 2
y <- c(rep(1, 150), rep(2, 50))
dat <- data.frame (x = x, y = as.factor(y))
```

### Plot

```{r}
plot(x,col=y)
```

### SVM

```{r}
library(e1071)
train <- sample(200, 100)
svmfit <- svm(y ~ ., data = dat[train, ], kernel = "radial",
gamma = 1, cost = 1)
plot(svmfit, dat[train, ])
```
:::
