---
title: "Control Flow"
format:
  revealjs:
    scrollable: true
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    incremental: false 
    chalkboard:
      src: chalkboard.json
      storage: chalkboard_pres
      theme: whiteboard
      chalk-width: 4
engine: knitr
knitr:
  opts_chunk: 
    echo: true
    eval: false
    comment: "#>" 


revealjs-plugins:
  - verticator
  
filters: 
  - reveal-header
  - reveal-auto-agenda
  - code-fullscreen
  - webr

webr: 
  show-startup-message: true
---

```{r}
#| include: false
#| eval: true
#| label: setup

library(DT)
library(tidyverse)
```

## Learning Objectives

-   Nested `for` Loops
-   `next` Statements
-   `break` Statements
-   `while` Loops

# Nested `for` Loops

## Nested `for` Loops

Nested `for` loops are `for` loops within another `for` loop. You can stack these loops as much as needed. Just make sure the index is different for each loop. The general format for a loop goes as follow:

```{r}
#| eval: false
for (i in vector_1){
  for (ii in vector_2){
    perform task
  }
}
```

## Example

Without using the `sd()` function, compute the standard deviation for each column of the matrix:

```{r}
x <- matrix(rnorm(1000), nrow = 10)
```

$$
s^2 = \frac{1}{n-1}\sum^n_{i=1}(x_i-\bar x)^2
$$

# `next` Statements

## `next` Statements

The `next` statement is used to skip an iteration of a loop. This is used along an `if` statement.

```{r}
#| eval: false

for (i in vector){
  perform task
  if (condition){
    next
  } else {
    perform task
  }
}

```

## Example

Compute the variance for all the possible variables in the `leuk` data set.

```{r}
#| eval: false
library(MASS)
leuk
```

Use `is.factor`

# `break` Statements

## `break` Statements

The `break` statement is used to stop a loop if the condition is met. This is used along with an `if` statement.

```{r}
#| eval: false

for (i in vector){
  perform task
  if (condition){
    break
  } else {
    perform task
  }
}
```

## Example

Simulate from a $N(1,1)$ distribution until you have 30 positive numbers or you simulate one negative number.

# `while` Loops

## `while` Loops

A while loop is a combination of a `for` loop and a `break` statement. The loop will continue indefinitely until a condition becomes false.

```{r}
#| eval: false


while (condition){
  perform task
  condition <- update condition
}
```

## Example

Simulate from a $N(0,1)$ distribution until you have 50 positive numbers.

## Example

Simulate from a $Binom(1,.2)$ distribution the sum of the random variables generated is 50.
