{
  "hash": "4f9595919f7cf41dee55dee402398f3e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Support Vector Machines\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: true\n    message: false\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n\neditor: visual\n---\n\n\n## Learning Outcomes\n\n-   Support Vector Machine\n-   R Code\n\n# Support Vector Machines\n\n## Motivating Example\n\n![](https://www.surveypractice.org/article/2715-using-support-vector-machines-for-survey-research/attachment/9153.png){fig-align=\"center\"}\n\n## Motivating Example\n\n![](https://i.stack.imgur.com/shjDw.png){fig-align=\"center\"}\n\n## Support Vector Machines\n\nA Support Vector Machine will create a nonlinear boundary instead of a line.\n\n::: fragment\nIt incorporates a kernel function that will compute the similarities between two support vectors.\n:::\n\n::: fragment\nThe kernel function can be loosely claimed how the data is modeled.\n:::\n\n## Nonlinear Boundary\n\n![](https://miro.medium.com/v2/resize:fit:982/1*J0k7TxTLoL5ZG-Hq6v34Jg.png){fig-align=\"center\"}\n\n## Nonlinear Boundary\n\n![](https://blog-c7ff.kxcdn.com/blog/wp-content/uploads/2017/02/kernel.png){fig-align=\"center\"}\n\n## Support Vector Machines Kernels\n\n-   Linear\n\n-   Polynomial\n\n-   Radial\n\n# R Code\n\n## R Code\n\n::: panel-tabset\n### Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nx <- matrix(rnorm(200 * 2), ncol = 2)\nx[1:100, ] <- x[1:100, ] + 2\nx[101:150, ] <- x[101:150 , ] - 2\ny <- c(rep(1, 150), rep(2, 50))\ndat <- data.frame (x = x, y = as.factor(y))\n```\n:::\n\n\n### Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x,col=y)\n```\n\n::: {.cell-output-display}\n![](lecture_28_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n### SVM\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(e1071)\ntrain <- sample(200, 100)\nsvmfit <- svm(y ~ ., data = dat[train, ], kernel = \"radial\",\ngamma = 1, cost = 1)\nplot(svmfit, dat[train, ])\n```\n\n::: {.cell-output-display}\n![](lecture_28_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n:::\n",
    "supporting": [
      "lecture_28_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}