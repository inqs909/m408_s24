{
  "hash": "a355c9966e3151438a9746d4d54f9c96",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Generalized Linear Models\"\nsubtitle: \"Estimation\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: false\n    eval: false\n    message: false\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n\neditor: visual\n---\n\n\n## Learning Outcomes\n\n-   Estimation Procedures\n\n    -   Regression Coefficients\n\n    -   Dispersion Parameter\n\n-   Newton-Raphson Algorithm\n\n# Estimating: $\\boldsymbol \\beta$\n\n## Estimating $\\boldsymbol\\beta$\n\nTo obtain the estimates of $\\boldsymbol \\beta$ we can use the maximum log-likelihood approach to obtain $\\hat{\\boldsymbol\\beta}$.\n\n$$\nL(\\boldsymbol \\beta) =  \\prod^n_{i=1}f\\left(y_i|\\boldsymbol X_i;\\boldsymbol \\beta,\\phi\\right)\n$$\n\n## Maximum Likelihood Approach\n\n$$\n\\ell(\\boldsymbol \\beta) =  \\sum^n_{i=1}\\log\\left\\{f\\left(y_i|\\boldsymbol X_i;\\boldsymbol \\beta,\\phi\\right)\\right\\}\n$$\n\n## Numerical Approaches\n\n-   Newton-Rhapson Algorithm\n\n-   Fisher-Scoring Algorithm\n\n-   Nelder-Mead\n\n-   BFGS\n\n# Estimating: $\\phi$\n\n## Estimating $\\phi$\n\nDepending on the random variable, the dispersion parameter will need to be estimated to conduct inference procedures. There are 4 methods to estimate the dispersion parameter:\n\n-   Maximum Likelihood\n\n-   Maximum (Modified) Profile Likelihood Approach\n\n-   Mean Deviance Estimator\n\n-   Pearson Estimator\n\n## Maximum Likelihood Approach\n\n$$\n\\ell(\\phi) =  \\sum^n_{i=1}\\log\\left\\{f\\left(y_i|\\boldsymbol X_i;\\boldsymbol \\beta,\\phi\\right)\\right\\}\n$$\n\n## Maximum (Modified) Profile Likelihood Approach\n\n$$\n\\ell_p(\\phi) = \\frac{p}{2}\\log \\phi + \\sum^n_{i=1}\\log\\left\\{f\\left(y_i|\\boldsymbol X_i;\\hat{\\boldsymbol \\beta},\\phi\\right)\\right\\}\n$$\n\n## Mean Deviance Estimator\n\n$$\n\\tilde \\phi = \\frac{D(y,\\hat\\mu)}{n-p}\n$$\n\n-   $D(y,\\hat\\mu)=2\\sum^n_{i=1}\\left\\{t(y,y) - t(y,\\mu) \\right\\}$\n\n-   $t(y,\\mu)=y\\theta-\\kappa(\\theta)$\n\n-   $p$: number of regression coefficients\n\n## Pearson Estimator\n\n$$\n\\bar \\phi = \\frac{\\Lambda^2}{n-p}\n$$\n\n-   $\\Lambda^2=\\sum^n_{i=1}\\frac{y_i-\\hat\\mu_i}{V(\\hat\\mu_i)}$\n\n-   $\\hat \\mu_i = g^{-1}(\\hat\\beta_0 + \\sum^n_{j=1}{X_{ij}\\hat\\beta_j})$\n\n-   $V(\\hat\\mu_i)=\\frac{d^2\\kappa(\\hat\\theta_i)}{d\\theta_i^2}$\n\n# Newton-Raphson Algorithm\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}