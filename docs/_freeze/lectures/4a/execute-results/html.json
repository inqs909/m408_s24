{
  "hash": "f4ca55092077fde736b138835a252b2a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"*apply Functions\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: false\n    comment: \"#>\" \n\neditor: source\n---\n\n\n\n\n\n## Learning Objectives\n\n-   \\*apply()\n-   apply()\n-   lapply()\n-   sapply\n-   mapply()\n-   tapply()\n\n# `*apply()`\n\n## `*apply()`\n\nThe `*apply()` functions are a set of functions that completes iterative tasks to each element of an R object.\n\n# `apply()`\n\n## `apply()`\n\nThe `apply` function returns a vector, array, or list of values by applying a function to the margins of an array. You will need to specify the following arguments:\n\n-   `X`: an array to be indexed and applied\n\n-   `MARGIN`: specifyng which index(es) to subset by\n\n-   `FUN`: function to be applied\n\n-   `…`: further arguments to be applied to `FUN`, must be labeled\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(X, MARGIN, FUN, ...)\n```\n:::\n\n\n\n## Example\n\nFind the standard deviation of all the columns of the following matrix:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- matrix(rnorm(1000), nrow = 10)\n```\n:::\n\n\n\n## Example\n\nFind the $25th$, $50th$, and $75th$ quartiles for each row of the following matrix:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- matrix(rnorm(1000), nrow = 20)\n```\n:::\n\n\n\n# `lapply()`\n\n## `lapply()`\n\nThe `lapply` function applies a function to all the elements of a vector or matrix, and it will return a list. You will need to specify the following arguments:\n\n-   `X`: object to be iterated\n\n-   `FUN`: a function to be applied\n\n-   `…`: further arguments to be passed along to `FUN`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(X, FUN, ...)\n```\n:::\n\n\n\n## Example\n\nCreate a function that returns a labeled list for with the following values: mean, standard deviation, median, max, and min.\n\n# `sapply()`\n\n## `sapply()`\n\nThe `sapply()` function will apply a function to each element of a list or vector, and it will return a simplified object, vector, matrix, or array. The `sapply()` function uses 4 main arguments:\n\n-   `X`: a vector or list to be iterated\n\n-   `FUN`: a function to be applied\n\n-   `…`: arguments passed along to `FUN`, must be labeled\n\n-   `simplify`: indicates how to simplify the function, defaults to n-dimensional array based on output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(X, FUN, ..., simplify = TRUE)\n```\n:::\n\n\n\n## Example\n\nUsing the vector below, compute the length of each string using `sapply` and `str_length()` from `tidyverse`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits <- c(\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\")\n```\n:::\n\n\n\n## Example\n\nUsing the list generated below, compute the mean of each element of the list using `sapply`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate a list of 10 lists, each containing 5 random numbers\nlists <- lapply(1:10, function(i) {\n  means <- rpois(1, 3)\n  rnorm(5, means)\n})\n```\n:::\n\n\n\n## Example\n\nUsing the vector below, use the `sapply()` to find $\\log(x)$ for each value and return a matrix:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers <- 4:400\n```\n:::\n\n\n\n# `mapply()`\n\n## `mapply()`\n\nThe `mapply()` is the multivariate function of `sapply()`. The `mapply()` function has 3 major arguments:\n\n-   `FUN`: function applied to data\n\n-   `…`: arguments to be iterated, must be labeled.\n\n-   `MoreArgs`: A list containing other arguments that are necessary to `FUN`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapply(FUN, ..., MoreArgs = NULL)\n```\n:::\n\n\n\n## Example\n\nLet `x` and `y` be two vectors, shown below, represent the x and y coordinates of a point. Using `mapply()`, compute the the distance between the points and the origin.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(2, 3, 4, 5)\ny <- c(4, 6, 8, 10)\n```\n:::\n\n\n\n# `tapply()`\n\n## `tapply()`\n\nThe `tapply()` function will apply function to a group of values based on and indexed lists. It takes 3 arguments:\n\n-   `X`: a vector that can split\n\n-   `INDEX`: the index list made up of factors\n\n-   `FUN`: the function that will be applied\n\n-   `…`: further arguments to be passed to `FUN`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntapply(X, INDEX, FUN = NULL, ...)\n```\n:::\n\n\n\n## Example\n\nUsing the `penguins` data set from the `palmerpenguins` package, compute the average `bill_length_mm` for each `island`.\n\n## Example\n\nThe vectors below provide the heights of different trees in the sample. Compute the median for each type of tree.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheights <- c(70, 72, 68, 65, 80, 75, 60, 68, 90, 72)\nspecies <- c(\"maple\", \"oak\", \"pine\", \"maple\", \"oak\", \"pine\", \"maple\", \"oak\", \"pine\", \"maple\")\n```\n:::\n",
    "supporting": [
      "4a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}