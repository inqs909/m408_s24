{
  "hash": "09c400190d89bc3bd1734f5547b49a87",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Manipulation\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: false\n    message: false\n    comment: \"#>\" \n\neditor: visual\n---\n\n\n\n\n## Learning Objectives\n\n-   Directories/R Projects\n\n-   Reading/Writing Data\n\n-   Merging Data\n\n-   `dplyr` Functions\n\n# Directories/R Projects\n\n## Directories\n\nDirectories is the file system located on your computer.\n\nA file path indicates the location of certain files relative to your main (home) folder.\n\n## Working Directory\n\nThis is the folder where R will save and read all the files when the file path is not specified.\n\nTo get the current working directory:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\nTo set the working directory:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"new_file_path\")\n```\n:::\n\n\n## R Projects\n\nR Projects are ways for RStudio to organize files together for specific\n\n# Reading/Writing Data\n\n## Read Data\n\n-   Easiest way is to have RStudio do it for you\n\n-   Use Base R functions\n\n-   Use `readr` package for tabular/text files\n\n-   Use `readxl` package for excel files\n\n-   Use `haven` package to read SAS, SPSS, or Stata files.\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1 <- read_csv(\"files/data/data_3_1.csv\")\ndata2 <- read_csv(\"/home/inqs/Repos/M408_S23/data/data_3_2.csv\")\n```\n:::\n\n\n## Example\n\nDownload the following zip file: [data](https://m408.inqs.info/files/data.zip)\n\nLoad data `data_3_1.csv` and `data_3_2.csv`.\n\n## Example\n\nLoad the following data: <https://m408.inqs.info/files/data/data_3_3.csv>\n\n## Write Data\n\nSeveral functions that you can use to write functions from the `readr` and `readxl`.\n\nI recommend using the `write_csv` function and provide csv files.\n\n## RData\n\nRData is the data file specific for R.\n\n### Load Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"data.RData\")\n```\n:::\n\n\n### Write Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(RObject, file = \"data.RData\")\n```\n:::\n\n\n# Merging Data\n\n## `*_join()`\n\n-   The `*_join()` functions are used to merge 2 data frames together.\n\n## Example\n\nMerge data sets `data_3_1.csv` and `data_3_2.csv` using the `full_join()`\n\n# `dplyr` Functions\n\n## `mutate()`\n\n-   Adds a new variable to a data frame\n\n-   Example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% mutate(log_mpg=log(mpg)) %>% \n  head\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb  log_mpg\n#> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 3.044522\n#> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 3.044522\n#> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 3.126761\n#> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 3.063391\n#> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 2.928524\n#> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 2.895912\n```\n\n\n:::\n:::\n\n\n## `mutate()`\n\n-   Each argument is a new variable added\n\n-   Example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% mutate(log_mpg=log(mpg),log_hp=log(hp)) %>%\n  head\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#>         new variable 'log_hp' (double) with 22 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb  log_mpg\n#> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 3.044522\n#> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 3.044522\n#> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 3.126761\n#> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 3.063391\n#> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 2.928524\n#> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 2.895912\n#>                     log_hp\n#> Mazda RX4         4.700480\n#> Mazda RX4 Wag     4.700480\n#> Datsun 710        4.532599\n#> Hornet 4 Drive    4.700480\n#> Hornet Sportabout 5.164786\n#> Valiant           4.653960\n```\n\n\n:::\n:::\n\n\n## Example\n\nUsing the `penguins` dataset from `palmerpenguins`, create a new variable that is the ln of `flipper_length_mm`.\n\n## `select()`\n\n-This selects the variables to keep in the data frame\n\n-Example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% mutate(log_mpg=log(mpg),log_hp=log(hp)) %>% \n  select(mpg,log_mpg,hp,log_hp) %>% \n  head\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#>         new variable 'log_hp' (double) with 22 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> select: dropped 9 variables (cyl, disp, drat, wt, qsec, …)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>                    mpg  log_mpg  hp   log_hp\n#> Mazda RX4         21.0 3.044522 110 4.700480\n#> Mazda RX4 Wag     21.0 3.044522 110 4.700480\n#> Datsun 710        22.8 3.126761  93 4.532599\n#> Hornet 4 Drive    21.4 3.063391 110 4.700480\n#> Hornet Sportabout 18.7 2.928524 175 5.164786\n#> Valiant           18.1 2.895912 105 4.653960\n```\n\n\n:::\n:::\n\n\n## Example\n\nUsing the `penguins` dataset from `palmerpenguins`, only select the variables that are continuous data points.\n\n## `filter()`\n\n-   Selects observations that satisfy a condition\n\n-   Example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% mutate(log_mpg=log(mpg),log_hp=log(hp)) %>% \n  select(mpg,log_mpg,hp,log_hp) %>% \n  filter(log_hp<5) %>% \n  head\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#>         new variable 'log_hp' (double) with 22 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> select: dropped 9 variables (cyl, disp, drat, wt, qsec, …)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> filter: removed 15 rows (47%), 17 rows remaining\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>                 mpg  log_mpg  hp   log_hp\n#> Mazda RX4      21.0 3.044522 110 4.700480\n#> Mazda RX4 Wag  21.0 3.044522 110 4.700480\n#> Datsun 710     22.8 3.126761  93 4.532599\n#> Hornet 4 Drive 21.4 3.063391 110 4.700480\n#> Valiant        18.1 2.895912 105 4.653960\n#> Merc 240D      24.4 3.194583  62 4.127134\n```\n\n\n:::\n:::\n\n\n## Example\n\nUsing the `penguins` dataset from `palmerpenguins`, filter the data set to look at penguins that are a Gentoo species.\n\n## `if_else()`\n\n-   A function that provides T (1) if the condition is met and F (0) otherwise\n\n-   Example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% mutate(log_mpg=log(mpg),log_hp=log(hp)) %>% \n  select(mpg,log_mpg,hp,log_hp) %>% \n  filter(log_hp<5) %>% \n  mutate(hilhp=if_else(log_hp>mean(log_hp),1,0)) %>% \n  head\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#>         new variable 'log_hp' (double) with 22 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> select: dropped 9 variables (cyl, disp, drat, wt, qsec, …)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> filter: removed 15 rows (47%), 17 rows remaining\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> mutate: new variable 'hilhp' (double) with 2 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>                 mpg  log_mpg  hp   log_hp hilhp\n#> Mazda RX4      21.0 3.044522 110 4.700480     1\n#> Mazda RX4 Wag  21.0 3.044522 110 4.700480     1\n#> Datsun 710     22.8 3.126761  93 4.532599     1\n#> Hornet 4 Drive 21.4 3.063391 110 4.700480     1\n#> Valiant        18.1 2.895912 105 4.653960     1\n#> Merc 240D      24.4 3.194583  62 4.127134     0\n```\n\n\n:::\n:::\n\n\n## Example\n\nUsing the `penguins` dataset from `palmerpenguins`, create a new variable that dichotomizes a penguin if their bill is longer than the average `bill_length_mm`.\n\n## `group_by()`\n\n-   This groups the data frame\n\n-   Example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% mutate(log_mpg=log(mpg),log_hp=log(hp)) %>% \n  select(mpg,log_mpg,hp,log_hp) %>% \n  filter(log_hp<5) %>% \n  mutate(hilhp=if_else(log_hp>mean(log_hp),1,0)) %>% \n  group_by(hilhp) %>% \n  head\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> mutate: new variable 'log_mpg' (double) with 25 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#>         new variable 'log_hp' (double) with 22 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> select: dropped 9 variables (cyl, disp, drat, wt, qsec, …)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> filter: removed 15 rows (47%), 17 rows remaining\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> mutate: new variable 'hilhp' (double) with 2 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> group_by: one grouping variable (hilhp)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 6 × 5\n#> # Groups:   hilhp [2]\n#>     mpg log_mpg    hp log_hp hilhp\n#>   <dbl>   <dbl> <dbl>  <dbl> <dbl>\n#> 1  21      3.04   110   4.70     1\n#> 2  21      3.04   110   4.70     1\n#> 3  22.8    3.13    93   4.53     1\n#> 4  21.4    3.06   110   4.70     1\n#> 5  18.1    2.90   105   4.65     1\n#> 6  24.4    3.19    62   4.13     0\n```\n\n\n:::\n:::\n\n\n## Example\n\nUsing the `penguins` dataset from `palmerpenguins`, group by species and find the average ln `flipper_length_mm`\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}