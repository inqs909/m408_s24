{
  "hash": "cf159b354c09dc023cd0a5fa21206674",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Functions\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: false\n    comment: \"#>\" \n\neditor: source\n---\n\n\n\n\n\n## Anouncements - Tidy Tuesday on Wednesday\n\n![](img/Math_Club_Flyer.png){fig-align=\"center\"}\n\n## Learning Objectives\n\n-   Built-in Functions\n-   User-built functions\n-   Extensions\n\n# Built-in Functions\n\n## Built-in Functions\n\nThere are several available functions in R to conduct specific statistical methods or tasks\n\n## Help Documentation\n\n| Section     | Description                                                 |\n|:-------------------|:---------------------------------------------------|\n| Description | Provides a brief introduction of the function               |\n| Usage       | Provides potential usage of the function                    |\n| Arguments   | Arguments that the function can take                        |\n| Details     | An in depth description of the function                     |\n| Value       | Provides information of the output produced by the function |\n| Notes       | Any need to know information about the function             |\n| Authors     | Developers of the function                                  |\n| References  | References to the model and function                        |\n| See Also    | Provide information of supporting functions                 |\n| Examples    | Examples of the function                                    |\n\n## Generic Functions\n\nSeveral R objects have a known class attached to it. A specialized object designed to be read by generic functions, such as `summary()` and `plot()`.\n\nFor example, the `summary()` is a generic for several types of functions: `summary.aov()`, `summary.lm()`, `summary.glm()`, and many more.\n\n## Commonly-used Function\n\n| Functions  | Description                 |\n|:-----------|:----------------------------|\n| `aov()`    | Fits an ANOVA Model         |\n| `lm()`     | Fits a linear model         |\n| `glm()`    | Fits a general linear model |\n| `t.test()` | Conducts a t-test           |\n\n# User-built functions\n\n## User-built functions\n\n-   Functions created by the user for analysis\n\n-   Needs to be ran once to the R environment\n\n-   Will be lost when R session is closed\n\n## Anatomy\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1-3|4-5|6|7\"}\nname_of_function <- function(data_1, data_2 = NULL, \n                             argument_1, argument_2 = TRUE, argument_3 = NULL,\n                             ...){\n  # Conduct Task\n  # Conduct Task\n  output_object <- Tasks\n  return(output_object)\n}\n```\n:::\n\n\n\n::: fragment\n-   `function`: used to construct the function\n\n-   `data1`: first data argument that needs to supplied\n\n-   `data2`: second data argument that does not need to be supplied\n\n-   `argument1`: first argument must be supplied to alter function\n\n-   `argument2`: second argument to alter function, set to `TRUE`\n\n-   `argument3`: third argument that does not need to be supplied\n\n-   `…`: additional arguments supplied to other functions\n:::\n\n## Example\n\nCreate a function for\n\n$$\ny = \\ln(x^2)\n$$\n\n## Example\n\nCreate a function for\n\n$$\nf(x) = \\left\\{\\begin{array}{cc}\nx^3 & x<0\\\\\nx^2 + 5 & \\mathrm{otherwise}\n\\end{array} \\right.\n$$\n\n## Example\n\nCreate a function for\n\n$$\nf(x,y) = \\left\\{\\begin{array}{cc}\nx^3 e^y &  x<0\\ \\\\\nx^2 + 5 + \\ln(y) & \\mathrm{otherwise}\n\\end{array} \\right.\n$$\n\n## Example\n\nCreate the function that allows your to compute the z-score of a specific value `x` using the sampling distribution from a set of data (`y` vector):\n\n$$\nz =  \\frac{x-\\bar y}{\\sqrt{s^2_{y}/n_y}}\n$$\n\n# Extensions\n\n## R Packages\n\nR Packages are used to utilize functions created from the community.\n\n### Installation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n### Loading\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n## Reticulate\n\nReticulate is an R package that allows you to utilize python within R.\n\n## Rcpp\n\nRcpp is an R package that allows you to call C++ programs in R.\n\nWe will compare variance functions written in cpp, user-built R, and built-in R.\n\nRcpp code:\n\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n// [[Rcpp::export]]\ndouble var_cpp(NumericVector x){\nint n = x.length();\nNumericVector pre(n);\ndouble mean_x = mean(x);\nfor (int i=0; i<n; ++i){\n   pre[i] = pow(x[i]-mean_x, 2);\n}\nint divisor = n - 1;\ndouble post = sum(pre) / divisor;\nreturn post;\n}\n```\n:::\n\n\n\nR code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_r <- function(x){\n  sum((x-mean(x))^2) / (length(x)-1)\n}\n```\n:::\n\n\n\nBenchmark Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(50)\nbench::mark(\nvar_cpp(x),\nvar_r(x),\nvar(x)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 3 × 6\n#>   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 var_cpp(x)   1.27µs   2.22µs   423478.    2.93KB      0  \n#> 2 var_r(x)     2.71µs   3.19µs   268178.   23.75KB     53.6\n#> 3 var(x)       4.89µs   5.92µs   162069.   13.73KB     64.9\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> function (x, y = NULL, na.rm = FALSE, use) \n#> {\n#>     if (missing(use)) \n#>         use <- if (na.rm) \n#>             \"na.or.complete\"\n#>         else \"everything\"\n#>     na.method <- pmatch(use, c(\"all.obs\", \"complete.obs\", \"pairwise.complete.obs\", \n#>         \"everything\", \"na.or.complete\"))\n#>     if (is.na(na.method)) \n#>         stop(\"invalid 'use' argument\")\n#>     if (is.data.frame(x)) \n#>         x <- as.matrix(x)\n#>     else stopifnot(is.atomic(x))\n#>     if (is.data.frame(y)) \n#>         y <- as.matrix(y)\n#>     else stopifnot(is.atomic(y))\n#>     .Call(C_cov, x, y, na.method, FALSE)\n#> }\n#> <bytecode: 0x5b55f3ae2250>\n#> <environment: namespace:stats>\n```\n\n\n:::\n:::\n\n\n\nThis is an extremely advanced topic. Only do this if you need real speed and efficiency.\n\n# Bisection Method\n\n## Motivating Example\n\n$$\nf(x) = 2 x^3 - 20x -43\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nf <- function(x) 2*x^3 - 20 * x - 43\nx <- seq(-5,5, length.out = 100)\nplot(x, f(x), type = \"l\")\nabline(h=0)\n```\n\n::: {.cell-output-display}\n![](3b_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## Finding the Root\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nf <- function(x) 2*x^3 - 20 * x - 43\nx <- seq(-5,5, length.out = 100)\nuniroot(f, lower = -5, upper = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> $root\n#> [1] 3.932792\n#> \n#> $f.root\n#> [1] -2.30166e-05\n#> \n#> $iter\n#> [1] 7\n#> \n#> $init.it\n#> [1] NA\n#> \n#> $estim.prec\n#> [1] 6.103516e-05\n```\n\n\n:::\n:::\n\n\n\n## Bisection Method\n\n1.  Begin with an interval $a$ and $b$ and evaluate $f(a)$ and $f(b)$.\n2.  If $f(a)$ and $f(b)$ are opposite signs, calculate $c = \\frac{a+b}{2}$ and $f(c)$.\n3.  If $|f(c)|<\\varepsilon$, for a small $\\varepsilon$, then stop the algorithm and $c$ is the root.\n4.  Replace $(a,f(a))$ or $(b,f(b))$ with $(c, f(c))$ so that the signs of $f( \\cdot )$ is 0.\n\n## Bisection Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nf <- function(x){2*x^3 - 20 * x - 43}\naa <- -5\nbb <- 5\ndiff <- 10\ni <- 0\nwhile(diff > 1e-6){\n  faa <- f(aa)\n  cc <- (aa + bb) / 2\n  fcc <- f(cc)\n  if (faa < 0 & fcc > 0){\n    bb <- cc\n  } else {\n    aa <- cc\n  }\n  diff <- abs(fcc)\n  i <- i + 1\n}\ni\ncc\nfcc\n```\n:::\n",
    "supporting": [
      "3b_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}