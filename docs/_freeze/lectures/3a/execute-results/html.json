{
  "hash": "b1689ecf22ce8cf75ad631e181670171",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Control Flow\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nengine: knitr\nknitr:\n  opts_chunk: \n    echo: true\n    eval: false\n    comment: \"#>\" \n\n\nrevealjs-plugins:\n  - verticator\n  \nfilters: \n  - reveal-header\n  - reveal-auto-agenda\n  - code-fullscreen\n  - webr\n\nwebr: \n  show-startup-message: true\n---\n\n\n\n\n## Learning Objectives\n\n-   `next` Statements\n-   `break` Statements\n-   `while` Loops\n\n# `next` Statements\n\n## `next` Statements\n\nThe `next` statement is used to skip an iteration of a loop. This is used along an `if` statement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in vector){\n  perform task\n  if (condition){\n    next\n  } else {\n    perform task\n  }\n}\n```\n:::\n\n\n\n# `break` Statements\n\n## `break` Statements\n\nThe `break` statement is used to stop a loop if the condition is met. This is used along with an `if` statement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in vector){\n  perform task\n  if (condition){\n    break\n  } else {\n    perform task\n  }\n}\n```\n:::\n\n\n\n# `while` Loops\n\n## `while` Loops\n\nA while loop is a combination of a `for` loop and a `break` statement. The loop will continue indefinitely until a condition becomes false.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initial Condition\ncondition <- starting TRUE condition\n\nwhile (condition){\n  perform task\n  condition <- update condition\n}\n```\n:::\n\n\n## Example\n\nSimulate from a $N(0,1)$ distribution until you have 50 positive numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nn <- 0\npos_num <- c()\n\nwhile (n < 51){\n  x <- rnorm(1)\n  if (x > 0) {\n    pos_num <- c(pos_num, x)\n    n <- n + 1\n  }\n}\n\npos_num\n```\n:::\n\n\n\n## Example\n\nFind the value of $x$ where the function $y=1/x$ relative converges ($\\frac{|y_{old}-y_{new}|}{y_{old}}$) at a level of $10^-6$ as $x\\rightarrow \\infty$.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndiff <- 10\nx <- 2\ny_old <- 1\nwhile (diff > 1e-6){\n  y_new <- 1 / x\n  diff <- abs(y_old - y_new) / y_old\n  x <- x + 1\n  y_old <- y_new\n}\n```\n:::\n\n\n\n\n## Example\n\nSimulate from a $Binom(1,.2)$ distribution until the sum of the random variables generated is 50.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsum_bin <- 0\nx <- c()\nwhile (sum_bin <51) {\n  x <- c(x, rbinom(1, 1, 0.2))\n  sum_bin <- sum(x)\n}\nsum_bin\nlength(x)\n```\n:::\n\n\n\n\n\n# `for` Loop Examples\n\n## Example\n\nGenerate the 10th row of Pascal's Triangle.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ni <- 2\nx <- c(1, 1)\nwhile (i < 11){\n  n <- length(x) + 1\n  y <- vector(length = n)\n  y[1] <- 1\n  y[n] <- 1\n  for (i in 2:(n-1)){\n    y[i] <- x[i-1] + x[i]\n  }\n  x <- y\n  i <- i + 1\n}\nx\n```\n:::\n\n\n## Example\n\nGenerate the first 1000 prime numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- 2\ny <- 2\nN <- 1\nwhile(N < 1001){\n  y <- y + 1\n  nn <- length(which(y %% x == 0))\n  if (nn == 0){\n    x <- c(x,y)\n  }\n  N <- length(x)\n}\nx\n```\n:::\n",
    "supporting": [
      "3a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}