{
  "hash": "72d2a7f58ea5607cde3a494758b71068",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Model Selection\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: true\n    message: false\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n\neditor: visual\n---\n\n\n## Learning Outcomes\n\n-   Shrinkage Methods\n\n-   Regression Splines\n\n-   Smoothing Splines\n\n-   Generalized Additive Models\n\n# Shrinkage Methods\n\n## Shrinkage Methods\n\nShrinkage methods are techniques that will reduce a full parameterized model (a high number of predictors) to a lower parameterized model (a smaller number of predictors).\n\n## Ridge Regression\n\nRidge regression incorporates a shrinkage penalty term to the least squares formula. The shrinkage penalty term will reduce the $\\beta$ coefficients towards 0 based on a penalty parameter ($\\lambda$)\n\n## Ridge Regression\n\n$$\n\\sum^n_{i=1}\\left(Y_i-\\beta_0 +\\sum^p_{j=1}X_{ij}\\beta_j\\right)^2 + \\lambda\\sum^p_{j=1}\\beta_j^2\n$$\n\n## LASSO\n\nLeast Absolute Shrinkage and Selection Operator (LASSO) is known as a shrinkage method which forces $\\beta$ coefficients that do not have a significant predicit power towards and possibly equal to 0.\n\n## LASSO\n\n$$\n\\sum^n_{i=1}\\left(Y_i-\\beta_0 +\\sum^p_{j=1}X_{ij}\\beta_j\\right)^2 + \\lambda\\sum^p_{j=1}|\\beta_j|\n$$\n\n## Why Ridge or LASSO?\n\nEach method is capable on identifying the optimum MSE for the Bias-Variance trade-off scenario. This will lead to a lower prediction error. The key is to find the optimal penalty parameter. This can be done with a Cross-Validation technique (next lecture).\n\n## Ridge Regression in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glmnet)\nglmnet(x,\n       y,\n       alpha = 0,\n       lambda)\n```\n:::\n\n\n## LASSO in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glmnet)\nglmnet(x,\n       y,\n       alpha = 1,\n       lambda)\n```\n:::\n\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glmnet)\nlibrary(tidyverse)\nlibrary(palmerpenguins)\npenguins <- penguins |> drop_na()\nmod <- penguins |> model.matrix(~ flipper_length_mm + bill_depth_mm + bill_length_mm - 1,\n  data = _) # Must include -1 to remove intercept, needed for glmnet\nridge_mod <- glmnet(x = mod, \n                    y = penguins$body_mass_g,\n                    alpha = 0,\n                    lambda = 1.3) # lambda was chosen at random\ncoef(ridge_mod)[,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>       (Intercept) flipper_length_mm     bill_depth_mm    bill_length_mm \n#>       -6400.54459          50.53481          17.07967           3.60524\n```\n\n\n:::\n:::\n\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_mod <- glmnet(x = mod, \n                    y = penguins$body_mass_g,\n                    alpha = 1,\n                    lambda = 1.3) # lambda was chosen at random\ncoef(lasso_mod)[,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>       (Intercept) flipper_length_mm     bill_depth_mm    bill_length_mm \n#>      -6372.371080         50.530548         16.241920          3.311152\n```\n\n\n:::\n:::\n\n\n# Nonparametric Regression\n\n## Nonparametric Regression\n\n# Regression Splines\n\n# Smoothing Splines\n\n# Generalized Additive Models\n",
    "supporting": [
      "11a_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}