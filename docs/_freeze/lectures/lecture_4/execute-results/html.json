{
  "hash": "d7daa44e5bac8e5c5e673fba2d71ed93",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Control Flow\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: false\n    comment: \"#>\" \n\neditor: visual\n---\n\n\n\n\n## Learning Objectives\n\n-   Nested `for` Loops\n-   `next` Statements\n-   `break` Statements\n-   `while` Loops\n\n# Nested `for` Loops\n\n## Nested `for` Loops\n\nNested `for` loops are `for` loops within another `for` loop. You can stack these loops as much as needed. Just make sure the index is different for each loop. The general format for a loop goes as follow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in vector_1){\n  for (ii in vector_2){\n    perform task\n  }\n}\n```\n:::\n\n\n## Example\n\nWithout using the `sd()` function, compute the standard deviation for each column of the matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- matrix(rnorm(1000), nrow = 10)\n```\n:::\n\n\n$$\ns^2 = \\frac{1}{n-1}\\sum^n_{i=1}(x_i-\\bar x)^2\n$$\n\n# `next` Statements\n\n## `next` Statements\n\nThe `next` statement is used to skip an iteration of a loop. This is used along an `if` statement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in vector){\n  perform task\n  if (condition){\n    next\n  } else {\n    perform task\n  }\n}\n```\n:::\n\n\n## Example\n\nCompute the variance for all the possible variables in the `leuk` data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\nleuk\n```\n:::\n\n\nUse `is.factor`\n\n# `break` Statements\n\n## `break` Statements\n\nThe `break` statement is used to stop a loop if the condition is met. This is used along with an `if` statement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in vector){\n  perform task\n  if (condition){\n    break\n  } else {\n    perform task\n  }\n}\n```\n:::\n\n\n## Example\n\nSimulate from a $N(1,1)$ distribution until you have 30 positive numbers or you simulate one negative number.\n\n# `while` Loops\n\n## `while` Loops\n\nA while loop is a combination of a `for` loop and a `break` statement. The loop will continue indefinitely until a condition becomes false.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhile (condition){\n  perform task\n  condition <- update condition\n}\n```\n:::\n\n\n## Example\n\nSimulate from a $N(0,1)$ distribution until you have 50 positive numbers.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}