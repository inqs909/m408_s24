{
  "hash": "fcbeb07f75fdbeade1cf6e2db25fd2fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: |\n  Recurrent \\\n  Neural Networks\nsubtitle: \"Time-Series and Audio Processing\"\nformat:\n  revealjs:\n    scrollable: true\n    include-in-header: \"math_commands.html\"\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: true\n    message: false\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n  - reveal-auto-agenda\n\neditor: source\n---\n\n\n\n# Sequential Data\n\n## Sequential Data\n\nSequential data is data that is obtained in a series:\n\n$$\nX_{(0)}\\rightarrow\nX_{(1)}\\rightarrow\nX_{(2)}\\rightarrow\nX_{(3)}\\rightarrow\n\\cdots\\rightarrow\nX_{(J-1)}\\rightarrow\nX_{(J)}\n$$ \n\n\n## Stochastic Procceses\n\nA stochastic process is a collection of random variables, that can be indexed by a parameters. Sequential data can be thought of as a stochastic process.\n\n::: fragment\nThe generation of a variable $X_{(j)}$ may or may not be dependent of the previous values.\n:::\n\n## Examples of Sequential Data\n\n-   Documents and Books\n\n-   Temperature\n\n-   Stock Prices\n\n-   Speech/Recordings\n\n-   Handwriting\n\n# Recurrent Neural Networks\n\n## RNN\n\nRecurrent Neural Networks are designed to analyze input data that is sequential data.\n\n::: fragment\nAn RNN can accounts for the position of a data point in the sequence as well as the distance it has to other data points.\n:::\n\n::: fragment\nUsing the data sequence, we can predict and outcome $Y$.\n:::\n\n## RNN\n\n![Source: ISLR2](img/islr2/Chapter10/10_12.png)\n\n## RNN Inputs\n\n$$\n\\boldsymbol X = (\\boldsymbol x_0, \\boldsymbol x_1, \\boldsymbol x_2, \\cdots, \\boldsymbol x_{J-1}, \\boldsymbol x_J)\n$$\nwhere \n\n$$\n\\boldsymbol x_{j} = (x_{j1},x_{j1}, \\cdots, x_{jK})\n$$\n\n## Hidden Layer\n\n$$\nh_{j} = f(\\bbeta_{hx}\\boldsymbol x_{j} + \\bbeta_{hh}h_{j-1} + b_h)\n$$\n\n- $\\bbeta_{hx}$ and $\\bbeta_{hh}$ are weight vectors for input-to-hidden, and hidden-to-hidden connections respectively.\n\n## Output Layer\n\n$$\ny_{j} = g(\\bbeta_{hy}h_{j} + b_y)\n$$\n\n# Document Classification\n\n## Document Classification\n\nDocument Classification is the process of classifying documents to different categories.\n\n# Time Series\n\n# R Code\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}