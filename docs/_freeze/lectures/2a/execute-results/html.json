{
  "hash": "244e58f64b964904dc98a538e854af07",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Control Flow\"\nformat:\n  revealjs:\n    scrollable: true\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      src: chalkboard.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nengine: knitr\nknitr:\n  opts_chunk: \n    echo: true\n    eval: false\n    comment: \"#>\" \n\n\nrevealjs-plugins:\n  - verticator\n  \nfilters: \n  - reveal-header\n  - reveal-auto-agenda\n  - code-fullscreen\n  - webr\n\nwebr: \n  show-startup-message: true\n---\n\n\n\n\n## Anouncements\n\nQuarto Template for HW: [Template](https://m408.inqs.info/files/template.qmd)\n\nGuides:\n\n-   [Quarto](https://quarto.org/docs/guide/)\n-   [Statistical Computing](https://www.inqs.info/stat_comp/document.html)\n\n## Learning Objectives\n\n-   Control Flow\n\n-   Indexing\n\n-   Comparing Numbers\n\n-   `if/else` Statements\n\n-   try()\n\n-   `for` Statements\n\n## Control Flow\n\nThe order a computer will complete tasks.\n\nUsually incorporates statements and loops.\n\n# Indexing\n\n## Indexing\n\nWithin an R object, you can access an element by indexing it.\n\nIndexing tells R which values to output.\n\n## Vectors\n\nA vector can be indexed by adding `[]` after the object's name and specifying the number of each element.\n\n```{webr-r}\nletters\nletters[13]\n```\n\n## Matrices\n\nA matrix can be indexed by adding `[]` after the object's name and specifying the number of each element. Separate the values by commas for specific indexes.\n\n```{webr-r}\nx <- matrix(1:40, nrow = 4)\n```\n\n## Data Frames\n\nData frames can be indexed using the `$` operator and `[]`.\n\n```{webr-r}\nmtcars[,\"mpg\"]\n```\n\n## Lists\n\nLists can be indexed using the `[[]]` for a specific element of a list.\n\n```{webr-r}\ntoy_list <- list(x = letters,\n                 y = mtcars,\n                 z = list(x = diag(rep(1, 5),\n                          y = matrix(1:40, nrow = 5),\n                          z = band_members)))\n```\n\n# Comparing Numbers\n\n## Comparing Numbers\n\nYou can compare two numbers, or objects, that will result in a logical output.\n\n## Comparing Numbers Operators\n\n| Operator | Description           |\n|----------|-----------------------|\n| `>`      | Greater Than          |\n| `<`      | Less Than             |\n| `>=`     | Greater than or equal |\n| `<=`     | Less than or equal    |\n| `==`     | Equals                |\n| `!=`     | Not Equals            |\n\n## Comparing Vectors\n\nWhen you compare a number to a vector, it will result as a logical vector.\n\n## Example\n\nTry the following code and explain what is happening:\n\n```{webr-r}\n4 > 1:8\n\n1:8 > 4\n```\n\n# `if`/`else` Statements\n\n## if/else Statements\n\nif/else statements are used to conduct specific tasks depending on the conditions\n\n## `if` Statement\n\nAn `if` statement is used to if you want R to perform a specific function if a certain condition is met. An `if` statement will only run a task if a logical is returned. You will need type `if`, followed by the condition (as a logical) in parentheses, then the task.\n\n## Example\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0){\n  print(\"Positive\")\n}\nprint(x)\n\n```\n\n## else statement\n\nAn `else` statement will conduct a different task if the `if` statement does not conduct the tasks.\n\n## Example\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0 ){\n  print(\"Positive\")\n} else {\n  print(\"Non-positive\")\n} \nprint(x)\n\n```\n\n## Chain if/else statement\n\nIf you have more than two options, you can chain `if/else` statements by adding an `if` statement immediately after the word `else`.\n\n## Example\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0 ){\n  print(\"Positive\")\n} else if (x == 0) {\n  print(\"Zero\")\n} else {\n  print(\"Negative\")\n}\nprint(x)\n\n```\n\n# `try()`\n\n## `try()`\n\nThe `try()` is an extremely powerful function that will prevent a code from stopping if an error occurs.\n\n## Example\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0 ){\n  stop(\"This is an error\")\n  print(\"Positive\")\n} else if (x == 0) {\n  print(\"Zero\")\n} else {\n  stop(\"This is an error\")\n  print(\"Negative\")\n}\nprint(x)\n\n```\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0 ){\n  try(stop(\"This is an error\"))\n  print(\"Positive\")\n} else if (x == 0) {\n  print(\"Zero\")\n} else {\n  try(stop(\"This is an error\"))\n  print(\"Negative\")\n}\nprint(x)\n\n```\n\n```{webr-r}\nx <- sample(-10:10,1)\nif (x > 0 ){\n  try(stop(\"This is an error\"), silent = T)\n  print(\"Positive\")\n} else if (x == 0) {\n  print(\"Zero\")\n} else {\n  try(stop(\"This is an error\"), silent = T)\n  print(\"Negative\")\n}\nprint(x)\n\n```\n\n# `for` Loops\n\n## `for` Loops\n\n`for` loops are used to conduct an iterative task with slight changes to the input. The general format goes as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (index in vector){\n  Conduct task\n}\n```\n:::\n\n\nYou will repeat the `for` loop untie all the elements in the vector have been used.\n\n## Example\n\nCompute the mean:\n\n$$\n\\bar x = \\frac{1}{n}\\sum^n_{i=1}x_i\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(100)\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] -0.02207598\n```\n\n\n:::\n:::\n\n\n## Example\n\nCompute the variance:\n\n$$\ns^2 = \\frac{1}{n-1}\\sum^n_{i-1}(x_i-\\bar x)^2\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(100)\nvar(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.9781764\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}