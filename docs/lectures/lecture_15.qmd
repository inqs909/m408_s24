---
title: "Residual Analysis"
format:
  revealjs:
    scrollable: true
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    incremental: false 
    chalkboard:
      src: chalkboard.json
      storage: chalkboard_pres
      theme: whiteboard
      chalk-width: 4
knitr:
  opts_chunk: 
    echo: false
    eval: false
    message: false
    warnings: false
    comment: "#>" 

editor: visual
---

```{r}
#| include: false
#| eval: true
#| label: setup

library(DT)

library(tidyverse)

library(GLMsData)

library(broom)

library(palmerpenguins)

library(magrittr)
```

## Learning Objective

-   Model Assumptions
-   Residual Analysis
-   Multicollinearity

# Model Assumptions

## Model

$$
y = \beta_0 + \beta_1 x + \epsilon
$$

-   $\epsilon \sim N(0,\sigma^2)$

## Model Scatter Plot

```{r}
#| eval: true
#| echo: true
x <- rnorm(1000, 8)
y <- -4 + 2*x + rnorm(1000, sd = 1)
df <- tibble(x,y)
ggplot(df, aes(x,y)) + geom_point() +
  theme_bw()
```

## Model Assumptions

-   Errors are normally distributed

-   Constant Variance

-   Linearity

-   Independence

-   No outliers

## Errors Normally Distributed

```{r}
#| eval: true

df %$% hist(y, main = "Histogram of Error") 

```

## Constant Variance

```{r}
#| eval: true
ggplot(df, aes(x,y)) + geom_point() +
  theme_bw()
```

## Constant Variance

```{r}
#| echo: true
#| eval: true

x <- rnorm(1000, 8, sd = 0.5)
y <- sapply(x, \(.) -4 + 5*. + rnorm(1, sd = ./2))
df <- tibble(x,y)
ggplot(df, aes(x,y)) + geom_point() +
  theme_bw()
```

## Linearity

```{r}
#| eval: true
#| echo: true
x <- rnorm(1000, 8)
y <- -4 + 2*x + rnorm(1000, sd = 1)
df <- tibble(x,y)
ggplot(df, aes(x,y)) + geom_point() +
  theme_bw()
```

## Linearity

```{r}
#| eval: true
#| echo: true
x <- rnorm(1000, 8, sd = 4)
y <- -4 - 1*x + -2*x^2 + rnorm(1000, sd = 16)
df <- tibble(x,y)
ggplot(df, aes(x,y)) + geom_point() +
  theme_bw()
```

## No Outliers

```{r}
#| eval: true
#| echo: true
x <- rnorm(1000, 8)
y <- -4 + 2*x + rnorm(1000, sd = 1)
df <- tibble(x,y)
ggplot(df, aes(x,y)) + geom_point() +
  theme_bw()
```

# Residuals and Influential Measurements

## Residuals

Residuals are the errors between the observed value and the estimated model. Common residuals include

-   Raw Residual

-   Standardized Residual

-   Jackknife (studentized) Residuals

## Influential Measurements

Influential measures are statistics that determine how much a data point affects the model. Common influential measures are

-   Leverages

-   Cook's Distance

## Raw Residuals

$$
\hat r_i = y_i - \hat y_i
$$

## Leverages

$$
H = \boldsymbol X (\boldsymbol X^\mathrm T\boldsymbol X)^{-1}\boldsymbol X ^\mathrm T
$$

-   $\boldsymbol X$: design matrix

-   $h_i = H[i,i]$: leverage for $i$th value

## Standardized Residuals

$$
\hat r^*_i = \frac{\hat r_i}{\sqrt{\hat\sigma^2(1-h_{i})}}
$$

-   $\hat \sigma^2$: Mean square error

-   $h_{ii}$: leverage of $i$th data point

## Jackknife Residuals

$$
\hat r ^\prime_i = \frac{y_i - \hat y_{i(i)}}{\sqrt{\hat \sigma^2_{(i)}(1-h_{i})}}
$$

-   $\hat y_{i(i)}$: fitted value for $i$th value from model fitted without $i$th data point

-   $\hat\sigma^2_{(i)}$: mean square error from model fitted without $i$th data point

## Cook's Distance

$$
\hat d_i = \frac{(y_i - \hat y_{i})^2}{(k+1)\hat \sigma^2}\left\{\frac{h_i}{(1-h_i)^2}\right\}
$$

-   $k$: number of predictors

# Residual Analysis

## Residual Analysis

A residual analysis is used to test the assumptions of linear regression.

## QQ Plot

A qq (quantile-quantile) plot will plot the estimated quantiles of the residuals against the theoretical quantiles from a normal distribution function. If the points from the qq-plot lie on $y=x$, it is said that the residuals follow a normal distribution.

## Residual vs Fitted Plot

This plot allows you to assess the linearity, constant variance, and identify potential outliers. Create a scatter plot between the fitted values (x-axis) and the raw/standardized residuals (y-axis).

## Residual vs X Plots

This plot helps identify issues with linearity and suggests potential solution. Create a scatter plot between raw/standardized residuals (y-axis) and the predictor variables (x-axis).

## Outlier Plots

An outlier plot can tell you if there are any outliers in the data. Create a scatter plot between the index number (x-axis) and standardized/studentized residuals (y-axis)

## Influential Observations Plots

Will identify outliers/observations that will have an affect on the model. Create a scatter plot between the index number (x-axis) and leverages/cook's distance (y-axis).

# Multicollinearity

## Mulitcollinearity

Multicolinearity occurs when predictor variable have a correlation between each other. Collinearity between predictor variables with inflate the standard errors and cause problems with inference.

## Variance Inflation Factor

The variance inflation factor is a measurement on how much variables are collinear with each other. A value greater than 10 is a cause for concern and action should be taken.

# R Code

## Fitting a model

```{r}
#| eval: true
#| echo: true
x_lm <- iris %$% lm(Petal.Length ~ Sepal.Length + Sepal.Width) %T>% 
  (\(.) print(summary(.)))

```

## Data Prep

```{r}
#| echo: true
#| eval: true

df_resid <- tibble(obs = 1:nrow(x_lm$model),
                   x_lm$model, 
                   resid = resid(x_lm),
                   fitted = fitted(x_lm),
                   sresid = rstandard(x_lm),
                   hatvals = hatvalues(x_lm),
                   jackknife =  rstudent(x_lm),
                   cooks = cooks.distance(x_lm)
                   )


```

## Residual vs Fitted

```{r}
#| echo: true
#| eval: true

ggplot(df_resid, aes(fitted, resid)) + geom_point() +
  geom_hline(yintercept = 0) +
  geom_smooth(se = F) +
  theme_bw()

```

## QQ Plot

```{r}
#| echo: true
#| eval: true

ggplot(df_resid, aes(sample = resid)) + stat_qq() +
  stat_qq_line() +
  theme_bw()
```

## Residuals vs X

```{r}
#| echo: true
#| eval: true

ggplot(df_resid, aes(Sepal.Length, resid)) + geom_point() +
  geom_hline(yintercept = 0) +
  stat_smooth(se = F) +
  theme_bw()

ggplot(df_resid, aes(Sepal.Width, resid)) + geom_point() +
  geom_hline(yintercept = 0) +
  stat_smooth(se = F) +
  theme_bw()

```

## Jackknife Residuals

```{r}
#| echo: true
#| eval: true

ggplot(df_resid, aes(obs, jackknife)) + geom_point() +
  theme_bw()

```

## Levarages

```{r}
#| echo: true
#| eval: true

ggplot(df_resid, aes(obs, hatvals)) + geom_point() +
  theme_bw()

```

## Cook's Distance

```{r}
#| echo: true
#| eval: true

ggplot(df_resid, aes(obs, cooks)) + geom_point() +
  theme_bw()

```

## Multicolinearity

```{r}
#| message: false
#| echo: true
#| eval: true
library(car)
iris %$% cor(Sepal.Length, Sepal.Width)
vif(x_lm)
```
